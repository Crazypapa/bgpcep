/**
* Generated file

* Generated from: yang module name: bgp-mock  yang module local name: bgp-mock
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Wed Nov 06 12:46:58 CET 2013
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.bgp.mock;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.annotation.Nullable;

import org.opendaylight.controller.config.api.JmxAttributeValidationException;
import org.opendaylight.protocol.bgp.rib.mock.BGPMock;
import org.opendaylight.protocol.bgp.util.BinaryBGPDumpFileParser;
import org.opendaylight.protocol.bgp.util.HexDumpBGPFileParser;

import com.google.common.base.Function;
import com.google.common.collect.Collections2;
import com.google.common.collect.Lists;

/**
*
*/
public final class BgpMockModule extends org.opendaylight.controller.config.yang.bgp.mock.AbstractBgpMockModule
{

	private List<byte[]> bgpMessages;
    
	public BgpMockModule(org.opendaylight.controller.config.api.ModuleIdentifier name, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        super(name, dependencyResolver);
    }

    public BgpMockModule(org.opendaylight.controller.config.api.ModuleIdentifier name, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, BgpMockModule oldModule, java.lang.AutoCloseable oldInstance) {
        super(name, dependencyResolver, oldModule, oldInstance);
    }

    @Override
    public void validate(){
		super.validate();
		JmxAttributeValidationException.checkCondition((getBinDump() != null && getHexDump() != null) == false, "Both 'HexDump' and 'BinDump' contain value", binDumpJmxAttribute);
		if (getBinDump() == null && getHexDump() == null) {
			bgpMessages = new ArrayList<>();
		} else if (getHexDump() != null) {
			try {
				bgpMessages = HexDumpBGPFileParser.parseMessages(getHexDump());
				bgpMessages = Lists.newArrayList(fixMessages(bgpMessages));
			} catch (Exception e) {
				JmxAttributeValidationException.wrap(e, "Error while parsing HexDump", hexDumpJmxAttribute);
			}
		} else {
			try {
				bgpMessages = BinaryBGPDumpFileParser.parseMessages(getBinDump());
			} catch (Exception e){
				JmxAttributeValidationException.wrap(e, "Error while parsing BinDump", binDumpJmxAttribute);
			}
		}
	}

	@Override
	public java.lang.AutoCloseable createInstance() {
		return new BGPMock(getEventBusDependency(), bgpMessages);
	}

	private Collection<byte[]> fixMessages(Collection<byte[]> bgpMessages) {
		return Collections2.transform(bgpMessages, new Function<byte[], byte[]>() {

			@Nullable
			@Override
			public byte[] apply(@Nullable byte[] input) {
				byte[] ret = new byte[input.length + 1];
				// ff
				ret[0] = -1;
				for (int i = 0; i < input.length; i++) {
					ret[i + 1] = input[i];
				}
				return ret;
			}
		});
	}
}
